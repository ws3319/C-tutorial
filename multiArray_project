#include <stdio.h>
#include <time.h>

int arrayAnimal[4][5]; // 카드(20장) 배열
int getEmptyPosition();
int conv_pos_x(int x);
int conv_pos_y(int y);
int checkAnimal[4][5]; // 카드가 뒤집혔는지 확인
int seq[4][5];

void initAnimalArray();
void initAnimalName();
void shuffleAnimal();
void printfAnimal();
void printQuestion();

char* strAnimal[10];

int main(void) {

	// 10 마리의 서로 다른 동물(각 카드 두 장씩)
	// 사용자로부터 2개의 입력값을 받아 -> 같은 동물 찾으면 뒤집기
	// 모든 동물 카드를 찾으면 게임 종료
	// 종료할 때 총 실패 횟수 알려주기

	srand(time(NULL));

	initAnimalArray();
	initAnimalName();

	shuffleAnimal();

	int failCount = 0;

	while (1) {
		int select1 = 0;
		int select2 = 0;

		printfAnimal(); // 동물 위치 출력
		printQuestion(); // 물제 출력(카드 지도)
		printf("뒤집을 카드 2개를 고르세요.\n");
		scanf_s("%d %d", &select1, &select2);

		if (select1 == select2) {
			continue;
		}

		// 좌표에 해당하는 카드를 뒤집어 보고 같은지 확인
		// 정수 좌표를 (x, y)로 변환
		int firstSelect_x = conv_pos_x(select1);
		int firstSelect_y = conv_pos_y(select1);

		int secondSelect_x = conv_pos_x(select2);
		int secondSelect_y = conv_pos_y(select2);

		if (checkAnimal[firstSelect_x][firstSelect_y] == 0
			&& checkAnimal[secondSelect_x][secondSelect_y] == 0 // 선택한 두 카드가 뒤집히지 않은 카드인지
			&& arrayAnimal[firstSelect_x][firstSelect_y] == arrayAnimal[secondSelect_x][secondSelect_y]) {
			// 선택한 두 카드가 같은 카드인지

			printf("빙고! %s 발견!\n\n", strAnimal[arrayAnimal[firstSelect_x][firstSelect_y]]);
			checkAnimal[firstSelect_x][firstSelect_y] = 1;
			checkAnimal[secondSelect_x][secondSelect_y] = 1; // 맞힌 카드 두 장을 뒤집힌 카드로 처리
		}
		else {
			printf("\n\n틀렸습니다! 이미 뒤집혔거나 서로 같지 않은 카드입니다.\n");
			printf("%d번 카드: %s\n", select1, strAnimal[arrayAnimal[firstSelect_x][firstSelect_y]]);
			printf("%d번 카드: %s\n", select2, strAnimal[arrayAnimal[secondSelect_x][secondSelect_y]]);
			printf("\n\n");

			failCount++;
		}
		if (foundAllAnimals() == 1) { // 모든 동물을 찾았는지 여부
			printf("\n축하합니다! 모든 동물을 찾았습니다!\n");
			printf("지금까지 총 %d 번 틀렸습니다. 프로그램을 종료합니다.\n", failCount);
			break;
		}
	}


	return 0;
}

void initAnimalArray() {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 5; j++) {
			arrayAnimal[i][j] = -1; // 초기값: -1(빈 공간)
		}
	}
}
void initAnimalName() {
	strAnimal[0] = "원숭이";
	strAnimal[1] = "하마";
	strAnimal[2] = "강아지";
	strAnimal[3] = "고양이";
	strAnimal[4] = "돼지";
	strAnimal[5] = "코끼리";
	strAnimal[6] = "기린";
	strAnimal[7] = "낙타";
	strAnimal[8] = "타조";
	strAnimal[9] = "호랑이";
}

void shuffleAnimal() { // 각 동물 카드 위치 얻기
	// □□□□□
	// □□□□□
	// □□□□□
	// □□□□□

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 2; j++) { // 각 동물마다 두 개의 위치를 얻어야 하므로 각 동물마다 두 번 실행
			int pos = getEmptyPosition(); // 비어있는 위치를 반환
			int x = conv_pos_x(pos);
			int y = conv_pos_y(pos);

			arrayAnimal[x][y] = i; // 10마리 동물의 위치 배열
		}
	}
}
int getEmptyPosition() { // 좌표에서 빈 공간 찾기
	while (1) {
		int randPos = rand() % 20; // 0~19 사이의 숫자 반환
		// 19 -> (3, 4)
		int x = conv_pos_x(randPos);
		int y = conv_pos_y(randPos);

		if (arrayAnimal[x][y] == -1) { // 빈 공간이면
			return randPos;
		}
	}
	return 0;
}

// □□□□□  0  1  2  3  4		/ 5:	0 0 0 0 0	 % 5:	0 1 2 3 4
// □□□□□  5  6  7  8  9				1 1 1 1 1			0 1 2 3 4
// □□□□□ 10 11 12 13 14				2 2 2 2 2			0 1 2 3 4
// □□□□□ 15 16 17 18 19				3 3 3 3 3			0 1 2 3 4
int conv_pos_x(int x) {
	// 19 -> (3, 4)
	return x / 5;
}
int conv_pos_y(int y) {
	return y % 5;
}

void printfAnimal() {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 5; j++) {
			if (checkAnimal[i][j] == 1) {
				printf("%8s", "CLEAR");
			}
			else {
			printf("%8s", strAnimal[arrayAnimal[i][j]]);
			}
		}
		printf("\n");
	}
	printf("\n=========================================\n\n");
}
void printQuestion() {
	printf("\n\n===================문제===================\n");

	int num = 0;

	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 5; j++) {
			seq[i][j] = num++;

			// 카드를 뒤집어서 정답을 맞혔으면 "동물이름"
			if (checkAnimal[i][j] != 0) { // checkAnimal == 1: 뒤집힘, 0: 뒤집히지 않음.
				printf("%8s", "CLEAR");
			}
			// 아직 맞추지 못했으면 뒷면 -> 위치를 나타내는 숫자 표시
			else {
				printf("%8d", seq[i][j]);
			}
		}
		printf("\n");
	}
}
	// □□□□□  0  1  2  3  4
	// □□□□□  5  6  7  8  9
	// □□□□□ 10 11 12 13 14
	// □□□□□ 15 16 17 18 19

int foundAllAnimals() {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 5; j++) {
			if (checkAnimal[i][j] == 0) // 하나라도 뒤집히지 않은 카드가 있으면 그대로 게임 재개.
				return 0;
		}
	}
	return 1; // 모두 찾음
}
