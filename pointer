#include <stdio.h>

void swap(int a, int b);
void swap_addr(int * a, int * b);

void changeArray(int* ptr);

int main(void) {

	// 포인터

	// [철수]: 101호 -> 메모리 공간의 주소
	// [영희]: 201호
	// [민수]: 301호
	// 각 문앞에 암호가 걸려 있음.
	/*int 철수 = 1;
	int 영희 = 2;
	int 민수 = 3;

	printf("철수네 주소: %d, 암호: %d\n", &철수, 철수); // &철수: 변수 '철수'의 주소값.
	printf("영희네 주소: %d, 암호: %d\n", &영희, 영희);
	printf("민수네 주소: %d, 암호: %d\n", &민수, 민수);

	// 미션맨

	// 첫 번째 미션: 아파트의 각 집에 방문하여 문에 적힌 암호 확인
	int * 미션맨; // 포인터 변수
	미션맨 = &철수;
	printf("미션맨이 방문하는 곳의 주소: %d, 암호: %d\n", 미션맨, *미션맨);

	미션맨 = &영희;
	printf("미션맨이 방문하는 곳의 주소: %d, 암호: %d\n", 미션맨, *미션맨);

	미션맨 = &민수;
	printf("미션맨이 방문하는 곳의 주소: %d, 암호: %d\n", 미션맨, *미션맨);

	// 두 번째 미션: 각 암호에 3을 곱해라.
	미션맨 = &철수;
	*미션맨 = *미션맨 * 3;
	printf("미션맨이 방문하는 곳의 주소: %d, 암호: %d\n", 미션맨, *미션맨);

	미션맨 = &영희;
	*미션맨 = *미션맨 * 3;
	printf("미션맨이 방문하는 곳의 주소: %d, 암호: %d\n", 미션맨, *미션맨);

	미션맨 = &민수;
	*미션맨 = *미션맨 * 3;
	printf("미션맨이 방문하는 곳의 주소: %d, 암호: %d\n", 미션맨, *미션맨);

	// * int, * char ...: 변수의 주소값을 알아내어 주소와 변수값을 제어할 수 있음.

	// 스파이
	// 미션맨이 바꾼 암호에서 2를 빼라.
	int* 스파이 = 미션맨;
	printf("\n스파이가 미션을 수행하는 중...\n\n");
	스파이 = &철수;
	*스파이 = *스파이 - 2; // 스파이 = 미션맨, *스파이 - 2 = *미션맨 - 2
	printf("스파이가 방문하는 곳의 주소: %d, 암호: %d\n", 스파이, *스파이);

	printf("\n스파이가 미션을 수행하는 중...\n\n");
	스파이 = &영희;
	*스파이 = *스파이 - 2; 
	printf("스파이가 방문하는 곳의 주소: %d, 암호: %d\n", 스파이, *스파이);

	printf("\n스파이가 미션을 수행하는 중...\n\n");
	스파이 = &민수;
	*스파이 = *스파이 - 2; 
	printf("스파이가 방문하는 곳의 주소: %d, 암호: %d\n", 스파이, *스파이);

	// 포인터는 변수의 값을 직접 바꿀 수 있다.
	printf("\n철수, 영희, 민수는 집에 오고서는 바뀐 암호를 보고 깜놀..\n");
	printf("철수네 주소: %d, 암호: %d\n", &철수, 철수); // &철수: 변수 '철수'의 주소값.
	printf("영희네 주소: %d, 암호: %d\n", &영희, 영희);
	printf("민수네 주소: %d, 암호: %d\n", &민수, 민수);
	
	// 미션맨이 사는 곳의 주소는 &미션맨으로 확인
	printf("미션맨의 주소: %d\n", 미션맨);
	printf("스파이의 주소: %d\n", 스파이);*/

	// 배열 ?
	/*int arr[3] = { 5, 10, 15 };
	int* ptr = arr;
	for (int i = 0; i < 3; i++) {
		printf("배열 arr[%d]의 값은 %d입니다.\n", i, arr[i]);
	}
	for (int i = 0; i < 3; i++) {
		printf("포인터 ptr[%d]의 값은 %d입니다.\n", i, ptr[i]);
	}

	// 포인터 ptr이 변수 arr에 직접 들어가서 값을 변경함.
	ptr[0] = 100;
	ptr[1] = 200;
	ptr[2] = 300;
	for (int i = 0; i < 3; i++) {
		//printf("배열 arr[%d]의 값은 %d입니다.\n", i, arr[i]);
		printf("배열 arr[%d]의 값은 %d입니다.\n", i, *(arr + i));
	}
	for (int i = 0; i < 3; i++) {
		//printf("포인터 ptr[%d]의 값은 %d입니다.\n", i, ptr[i]);
		printf("포인터 arr[%d]의 값은 %d입니다.\n", i, *(ptr + i));
	}
	// *(arr + i) == arr[i]
	// arr == arr 배열의 첫 번째 값의 주소와 동일 == &arr[0]
	printf("\narr 자체의 값: %d\n", arr);
	printf("arr[0]의 주소: %d\n", &arr[0]); // arr 자체의 값 == arr[0]의 주소

	printf("arr 자체의 값이 가지는 주소의 실제 값: %d\n", *arr); // == *(arr + 0)
	printf("arr[0]의 실제 값: %d\n", *&arr[0]); // arr[0] == arr 자체의 값이 가지는 주소의 실제 값 == arr[0]의 실제값

	// *& 는 아무것도 없는 것과 같다. & = 주소, * = 값이기 때문에 *&로 쓰이면 상쇄가 됨.
	printf("\narr[0]의 실제 값은 %d\n", arr[0]);
	printf("arr[0]의 실제 값은 %d\n", *&arr[0]);*/
	
	// SWAP
	/*int a = 10;
	int b = 20;
	printf("a의 주소는 %d\n", &a);
	printf("b의 주소는 %d\n\n", &b);
	// a와 b의 값을 바꾼다.
	printf("SWAP 함수 전 => a: %d, b: %d\n", a, b);
	swap(a, b);
	printf("SWAP 함수 후 => a: %d, b: %d\n\n", a, b);
	// 값에 의한 복사 (Call by Value) => 값만 복사한다는 의미. swap 함수 이후에는 값이 변경되지 않음.
	
	// 메모리 공간에 있는 주소값 자체를 넘기면? swap 함수 이후에도 값이 변경됨.
	printf("(주소값 전달)SWAP 함수 전 => a: %d, b: %d\n", a, b);
	swap_addr(&a, &b); // a와 b의 주소값 전달.
	printf("(주소값 전달)SWAP 함수 후 => a: %d, b: %d\n", a, b);*/

	// 포인터로 배열 값 변경
	int arr2[3] = { 10, 20, 30 };
	//changeArray(arr2); // arr2의 주소값 전달. 배열에서 arr2 자체가 주소이므로 & 붙일 필요 x
	changeArray(&arr2[0]); // changeArray(arr2) == changeArray(&arr2[0])
	for (int i = 0; i < 3; i++) {
		printf("%d\n", arr2[i]);
	}

	// scanf에서 &num과 같이 &를 사용하는 이유도 동일.
	
	return 0;
}

void swap(int a, int b) {
	int temp = a;
	a = b;
	b = temp;
	printf("(SWAP 함수 내)a의 주소는 %d\n", &a);
	printf("(SWAP 함수 내)b의 주소는 %d\n", &b);
	printf("SWAP 함수 내 => a: %d, b: %d\n\n", a, b);
}
void swap_addr(int * a, int * b) { // 주소값을 전달하려면 변수 a, b에 포인터(*)를 추가해주어야 함.
	int temp = *a;
	*a = *b;
	*b = temp;
	printf("(주소값 전달)SWAP 함수 내 => a: %d, b: %d\n", *a, *b);
}
void changeArray(int * ptr) {
	ptr[2] = 50;
}
