#include <stdio.h>
#include <time.h>

// 물고기가 6마리가 있다.
// 이들은 어항에 살고 있는데, 이곳은 사막이다.
// 사막이 너무 건조해서 물이 빨리 증발한다.
// 물이 다 증발하기 전에 부지런히 어항에 물을 줘서 물고기를 살리자.
// 물고기는 시간이 지날수록 커져서 나중에는...냠냠(?)

void initData(); // 데이터 초기화
void printFishes();
void evpWater(long elapsedTime);

int level, arrayFish[6];
int* cursor; // 어항에 물을 주는 역할.
int cheakFishAlive();

int main(void) {

	long startTime = 0; // 게임 시작 시간
	long totalElapsedTime = 0; // 총 경과 시간
	long prevElapsedTime = 0;// 직전 경과 시간(최근에 물을 준 시간 간격)
	int num; // 몇 번 어항에 물을 줄 것인지, 사용자 입력

	initData();

	cursor = arrayFish; // cursor[0] ... cursor[1] 등 사용가능. cursor == arrayFish == 물의 높이

	startTime = clock(); // clock: 현재 시간을 millisecond(1000분의 1초)로 반환.

	while (1) { // while(1): loop
		printFishes();
		printf("몇 번 어항에 물을 주시겠어요 ?\n");
		scanf_s("%d", &num);

		// 잘못된 입력값
		if (num < 1 || num > 6) {
			printf("\n입력값이 잘못되었습니다.\n");
			continue;
		}

		// 총 경과 시간
		totalElapsedTime = (clock() - startTime) / CLOCKS_PER_SEC; // time / CLOCKS_PER_SEC: 초단위로 바꿔 줌.
		printf("총 경과 시간: %ld\n", totalElapsedTime);

		// 마지막으로 물을 준 이후로 흐른 시간
		prevElapsedTime = totalElapsedTime - prevElapsedTime;
		printf("물을 준 후 경과 시간: %ld초\n", prevElapsedTime);

		// 어항의 물을 증발
		evpWater(prevElapsedTime);

		// 사용자가 입력한 어항에 물을 준다
		// 1. 어항의 물이 모두 증발했으면?
		if (cursor[num - 1] <= 0) {
			printf("%d번 물고기는 이미 죽었습니다. 물을 주지 않습니다.\n", num);
		}

		// 2. 어항의 물이 0이 아닌 경우? 물을 준다. 어항의 물의 높이가 100을 넘지 않는지 체크.
		else if (cursor[num - 1] + 1 <= 100) {
			// 물을 준다
			printf("\n\n%d 번 어항에 물을 줍니다.\n", num);
			cursor[num - 1] += 5; // == cursor[num - 1] +1
		}
		if (cursor[num - 1] + 1 > 100) {
			cursor[num - 1] = 100;
		}

		// 레벨업을 할 것인지 확인(레벨업은 20초마다 한 번씩 수행)
		if (totalElapsedTime / 20 > level - 1) { // level = 1부터 시작하므로 level - 1
			level++;
			printf("\n\tLevel UP! \t 현재 Lv.%d\n\n", level);
		}

		// 최종 레벨 5
		if (level == 5) {
			printf("축하합니다! 최고 레벨을 달성했습니다!\n");
			printf("프로그램을 종료합니다.\n");
			exit(0);
		}

		// 모든 물고기가 죽었는지 확인
		if (cheakFishAlive() == 0) {
			printf("\n\n물고기 다죽음;;\n");
			printf("프로그램을 종료합니다.\n");
			exit(0);
		}

		// 물을 줬을 때: 10초 그 다음에 물을 줬을 때: 15초(prevElapsedTime = 5 // line 48)
		// -> while문 한번 돈 다음에 시간을 계산해야되는데 prevElapsedTime == 5로 위에서 설정해버림.
		// line 52 수행 이후 바로 아래 코드를 수행하게 되니까 이 코드를 수행한 이후부터 다음 회차 scanf를 받을 때까지 걸린 시간을 측정하게 됨.
		prevElapsedTime == totalElapsedTime;
	}

	return 0;
}

void initData() {
	level = 1; // 게임 레벨(Lv.1~5)
	for (int i = 0; i < 6; i++) {
		arrayFish[i] = 100; // 어항의 물 높이(0~100)
	}
}
void printFishes() {
	printf("%3d번 %3d번 %3d번 %3d번 %3d번 %3d번\n", 1, 2, 3, 4, 5, 6); // %nd: n byte만큼 공백 추가(d에 올 숫자 포함)
	for (int i = 0; i < 6; i++) {
		printf(" %4d ", arrayFish[i]); // '%3d번 '은 6바이트이므로 자리 위치 맞춰주기.
	}
	printf("\n\n");
}
void evpWater(long elapsedTime) {
	for (int i = 0; i < 6; i++) {
		arrayFish[i] -= (level * 3 * (int)elapsedTime); // 3: 난이도 조절을 위한 값.
		// == arrayFish[i] - (level * 3 * (int)elapsedTime)
		// elapsedTime은 시간(long)이므로 계산에 쓰이기 위해 (int)를 붙여준다.

		if (arrayFish[i] < 0) {
			arrayFish[i] = 0;
		}
	}
}
int cheakFishAlive() {
	for (int i = 0; i < 6; i++) {
		if (arrayFish[i] > 0) {
			return 1;
		}
	}
	return 0;
}
